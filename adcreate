#!/bin/bash
#
CONFFILE=adcreate.conf
LOGFILE=adcreate.log
ERRFILE=adcreate.err
#
echo "===================`date +%d-%m-%Y.%H:%M:%S` =================" >> $LOGFILE;
echo "===================`date +%d-%m-%Y.%H:%M:%S` =================" >> $ERRFILE;
exec 1> >(tee -a "$LOGFILE");
exec 2>>$ERRFILE;
#
logo() {
    clear;
    echo "
            _   ___       ___ ___ ___   _ _____ ___ 
           /_\ |   \ ___ / __| _ \ __| /_\_   _| __|
          / _ \| |) |___| (__|   / _| / _ \| | | _|   
         /_/ \_\___/     \___|_|_\___/_/ \_\_| |___|  v1.0

________________________by A1yson Morais__________________________
";
}
ou() {
    echo "Criando UNIDADES ORGANIZACIONAIS com os dados do arquivo '$ENTRADA'...
";
    sleep 2;
    while read line;
    do
    	$SMB_DIR/bin/samba-tool ou create $line;
    done < $ENTRADA
    echo " ";
}
gmid() {
    C1=GRUPO
    C2=MEMBRO_DE
    C3=ESCOPO
    C4=UORG
    C5=AD_GID
    tail -n +2 $ENTRADA | sed -e 's/\t/;/g' > .import-grp.tmp ; SOURCE=.import-grp.tmp
    sleep 2;
    echo "Criando GRUPOS com os dados do arquivo '$ENTRADA' e obtendo GID's do seu campo AD_GID...
";
    sleep 2;
    while read $C1 $C2 $C3 $C4 $C5 
    do
    	AD_GID=`echo $AD_GID | tr -d '\r'`;
    	$SMB_DIR/bin/samba-tool group add $GRUPO --group-scope=$ESCOPO --groupou=$UORG --nis-domain=$NIS_D --gid-number=$AD_GID ;
        IFS=',';
        array=($MEMBRO_DE);
        for i in ${array[@]}; do
            $SMB_DIR/bin/samba-tool group addmembers $i $GRUPO ;
        done;
        export IFS=";";
    done < $SOURCE
    rm .import-grp.tmp
    echo " ";
}
gaid() {
    C1=GRUPO
    C2=MEMBRO_DE
    C3=ESCOPO
    C4=UORG
    C5=AD_GID
    tail -n +2 $ENTRADA | sed -e 's/\t/;/g' > .import-grp.tmp ; SOURCE=.import-grp.tmp;
    sleep 2;
    AD_GID=`ldbsearch -H $SMB_DIR/private/sam.ldb | grep gidNumber: | sort -n | tail -1 | cut -f2 -d" "`
    echo "O último GID em uso é * $AD_GID *.
";
    sleep 2;
    echo "Criando GRUPOS com os dados do arquivo '$ENTRADA' e ignorando o seu campo AD_GID...
";
    sleep 2;
    while read $C1 $C2 $C3 $C4 $C5
    do
        AD_GID=`ldbsearch -H $SMB_DIR/private/sam.ldb | grep gidNumber: | sort -n | tail -1 | cut -f2 -d" "`    	
        let AD_GID=$AD_GID+1;
    	$SMB_DIR/bin/samba-tool group add $GRUPO --group-scope=$ESCOPO --nis-domain=$NIS_D --gid-number=$AD_GID --groupou=$UORG ;
        IFS=',';
        array=($MEMBRO_DE);
        for i in ${array[@]}; do
            $SMB_DIR/bin/samba-tool group addmembers $i $GRUPO ;
        done;
        export IFS=";";
    done < $SOURCE
    rm .import-grp.tmp
    echo " ";
}
godc() {
    C1=GRUPO
    C2=MEMBRO_DE
    C3=ESCOPO
    C4=UORG
    C5=AD_GID
    tail -n +2 $ENTRADA | sed -e 's/\t/;/g' > .import-grp.tmp ; SOURCE=.import-grp.tmp;
    sleep 2;
    echo "Criando GRUPOS com os dados do arquivo '$ENTRADA' e ignorando o seu campo AD_GID...
";
    sleep 2;
    while read $C1 $C2 $C3 $C4 $C5
    do
        $SMB_DIR/bin/samba-tool group add $GRUPO --group-scope=$ESCOPO --groupou=$UORG ;
        IFS=',';
        array=($MEMBRO_DE);
        for i in ${array[@]}; do
            $SMB_DIR/bin/samba-tool group addmembers $i $GRUPO ;
        done;
        export IFS=";";
    done < $SOURCE
    rm .import-grp.tmp
    echo " ";
}
umid() {
    C1=NOME
    C2=SOBRENOME
    C3=UORG
    C4=SENHA
    C5=MEMBRO_DE
    C6=AD_UID
    tail -n +2 $ENTRADA | sed -e 's/\t/;/g' > .import-users.tmp ; SOURCE=.import-users.tmp
    sleep 2;
    echo "Criando USUÁRIOS com os dados do arquivo '$ENTRADA' e obtendo UID's do seu campo AD_UID...
";
    sleep 2;
    while read $C1 $C2 $C3 $C4 $C5 $C6 
    do
    	AD_UID=`echo $AD_UID | tr -d '\r'`;
    	$SMB_DIR/bin/samba-tool user create $NOME.$SOBRENOME $SENHA --userou=$UORG --given-name=$NOME --surname=$SOBRENOME --nis-domain=$NIS_D --unix-home=$H_DIR/$USUARIO --uid-number=$AD_UID --login-shell=$L_SHELL --gid-number=$P_GUID --use-username-as-cn --must-change-at-next-login ;
        IFS=',';
        array=($MEMBRO_DE);
        for i in ${array[@]}; do
            $SMB_DIR/bin/samba-tool group addmembers $i $NOME.$SOBRENOME ;
        done;
        export IFS=";";
    done < $SOURCE
    rm .import-users.tmp;
    echo " ";
}
uaid() {
    C1=NOME
    C2=SOBRENOME
    C3=UORG
    C4=SENHA
    C5=MEMBRO_DE
    C6=AD_UID
    tail -n +2 $ENTRADA | sed -e 's/\t/;/g' > .import-users.tmp ; SOURCE=.import-users.tmp;
    sleep 2;
    AD_UID=`ldbsearch -H $SMB_DIR/private/sam.ldb | grep uidNumber: | sort -n | tail -1 | cut -f2 -d" "`;
    echo "O último UID em uso é * $AD_UID *.
";
    sleep 2;
    echo "Criando USUÁRIOS com os dados do arquivo '$ENTRADA' e ignorando o seu campo AD_UID...
";
    sleep 2;
    while read $C1 $C2 $C3 $C4 $C5 $C6
    do
        AD_UID=`ldbsearch -H $SMB_DIR/private/sam.ldb | grep uidNumber: | sort -n | tail -1 | cut -f2 -d" "`;
        let AD_UID=$AD_UID+1;
    	$SMB_DIR/bin/samba-tool user create $NOME.$SOBRENOME $SENHA --userou=$UORG --given-name=$NOME --surname=$SOBRENOME --nis-domain=$NIS_D --unix-home=$H_DIR/$USUARIO --uid-number=$AD_UID --login-shell=$L_SHELL --gid-number=$P_GUID --use-username-as-cn --must-change-at-next-login ;
    	IFS=',';
        array=($MEMBRO_DE);
        for i in ${array[@]}; do
            $SMB_DIR/bin/samba-tool group addmembers $i $NOME.$SOBRENOME ;
        done;
        export IFS=";";
    done < $SOURCE
    rm .import-users.tmp;
    echo " ";
}
uodc() {
    C1=NOME
    C2=SOBRENOME
    C3=UORG
    C4=SENHA
    C5=MEMBRO_DE
    C6=AD_UID
    tail -n +2 $ENTRADA | sed -e 's/\t/;/g' > .import-users.tmp ; SOURCE=.import-users.tmp;
    sleep 2;
    echo "Criando USUÁRIOS com os dados do arquivo '$ENTRADA' e ignorando o seu campo AD_UID...
";
    sleep 2;
    while read $C1 $C2 $C3 $C4 $C5 $C6
    do
    	$SMB_DIR/bin/samba-tool user create $NOME.$SOBRENOME $SENHA --userou=$UORG --given-name=$NOME --surname=$SOBRENOME --use-username-as-cn --must-change-at-next-login ;
    	IFS=',';
        array=($MEMBRO_DE);
        for i in ${array[@]}; do
            $SMB_DIR/bin/samba-tool group addmembers $i $NOME.$SOBRENOME ;
        done;
        export IFS=";";
    done < $SOURCE
    rm .import-users.tmp;
    echo " ";
}
help() {
    logo;
    echo "******************** AJUDA DO SCRIP adcreate ********************

1. AJUDA

    1.1 - adcreate help ----> Exibe esse texto de ajuda;

2. CONFIGURAÇÃO DO adcreate

    2.1 - adcreate cfg ----> Abre o assistente de configuração para que sejam informados os
        parâmetros necessários para o funcionamento correto do adcreate no seu sistema.

3. MODO PADRÃO

    SÍNTAXE: 'adcreate <option> <yourfile>'

    3.1 - CRIAR UNIDADES ORGANIZACIONAIS:

        3.1.1 - adcreate ou yourfile.txt   ----> Criar unidades organizacionais a partir de um
                arquivo .txt;

    3.2 - CRIAR GRUPOS:

        3.2.1 - adcreate gaid yourfile.csv ----> Com GID automática; (ignora coluna AD_GID do
                arquivo .csv).
        3.2.2 - adcreate gmid yourfile.csv ----> Com GID manual, obtida do campo AD_GID do arquivo .csv;
        3.2.1 - adcreate godc yourfile.csv ----> Domain Controller e Fileserver em uma única instância
                do Samba (Sem RFC2307);

    3.3 - CRIAR USUÁRIOS:

        3.3.1 - adcreate uaid youfile.csv  ----> Com UID automática; (ignora coluna AD_UID do
                arquivo .csv).
        3.3.2 - adcreate umid youfile.csv  ----> Com UID manual, obtida do campo AD_GID do arquivo .csv;
        3.3.3 - adcreate uodc youfile.csv  ----> Domain Controller e Fileserver em uma única instância do
                Samba; (Sem RFC2307).

4. MODO AUTOMÁTICO:

    SÍNTAXE: 'adcreate auto'

    4.1 - No modo automático, o adcreate inicia a criação de todos os objetos contidos nos arquivos
        padrão que acompanham o script, dentro do diretório 'adcreate.d'. 

        Os arquivos são: 'ous.txt', 'groups.csv' e 'users.csv'. 

        Para que o modo automático funcione, os arquivos devem estar com os nomes originais e no
        diretório 'adcreate.d' padrão.
 
";
exit 0;
}
erro0() {
    logo;
    echo "Erro!

Quantidade de parâmetros inválida!

Use: 'adcreate <option> <yourfile>' ou 'adcreate help' para ajuda.
"; 
	exit 1
}
erro1() {
    logo;
    echo "Erro!

O parâmetro '$PAR' é inválido.

Use: 'adcreate <option> <yourfile>' ou 'adcreate help' para ajuda.
";
    exit 1;
}
erro2() {
    logo;
    echo "Erro!

Falta especificar o arquivo para o parâmetro '$PAR'.

Use: 'adcreate $PAR <yourfile>' ou 'adcreate help' para ajuda.
";
    exit 1;
}
erro3() {
    logo;
    echo "Erro!

O arquivo '$ENTRADA' possui as $FCOUNT colunas abaixo:

$FNAMES

O parâmetro '$PAR' requer exatamente as $FNUM colunas abaixo:

$FN

Confira seu arquivo.
";
    exit 1;
}
comando() {
    FCOUNT=`head -n 1 $ENTRADA | awk -F"\t" '{print NF}'`;
    FNAMES="| `head -n 1 $ENTRADA | sed -e 's/\t/ | /g'` |";
    if [[ $FNAMES == $FN ]]; then
        $PAR;
    else
        erro3;
    fi
}
CompGroup() {
    FNUM=5
    FN="| GRUPO | MEMBRO_DE | ESCOPO | UORG | AD_GID |"
    comando;
}
CompUser() {
    FNUM=6
    FN="| NOME | SOBRENOME | UORG | SENHA | MEMBRO_DE | AD_UID |"
    comando;
}
readconf() {
    logo;
    if [ -e "$CONFFILE" ]; then
        SMB_DIR=$(grep "SAMBA_DIR" adcreate.conf | cut -d "=" -f 2 | tr -d '\r')
        NIS_D=$(grep "NIS_DOMAIN" adcreate.conf | cut -d "=" -f 2 | tr -d '\r')
        P_GUID=$(grep "DEFAULT_GUID" adcreate.conf | cut -d "=" -f 2 | tr -d '\r')
        H_DIR=$(grep "HOME_DIR" adcreate.conf | cut -d "=" -f 2 | tr -d '\r')
        L_SHELL=$(grep "LOGIN_SHELL" adcreate.conf | cut -d "=" -f 2 | tr -d '\r')
    else
        echo "Arquivo de configuração '$CONFFILE' ausente!
Configuração necessária.

Aguarde o assistente...
";
        sleep 4;
        makeconf;
        readconf;
    fi    
}
makeconf() {
    rm adcreate.conf 2>>/dev/null;
    logo;
    echo "****************** CONFIGURADOR DO adcreate *********************
";
    echo "1 - Informe o caminho absoluto do diretorio da sua instalação Samba, sem barra '/' no final.
Exemplo: '/opt/samba' (sem as aspas):
"
    read SMB_DIR;
    echo "SAMBA_DIR=$SMB_DIR">>$CONFFILE

    logo;
    echo "2 - Informe o nome NETBIOS do seu domínio para o parâmetro 'NIS_DOMAIN'.

NOTA: Atributo RFC2307 é dispensável para uso com parâmetros 'godc/uodc'.

Exemplo: Se seu domínio é 'tilabs.lan', seu domínio NETBIOS é apenas 'tilabs', sem aspas:
"
    read NIS_D;
    echo "NIS_DOMAIN=$NIS_D">>$CONFFILE

    logo;
    echo "3 - Informe o GID do grupo padrão dos usuários que serão criados.
Geralmente é usado o GID do grupo 'Domain Users'.

NOTA: Atributo RFC2307 é dispensável para uso com parâmetros 'godc/uodc'.

Exemplo: '10000' (sem as aspas):
"
    read P_GUID;
    echo "DEFAULT_GUID=$P_GUID">>$CONFFILE

    logo;
    echo "Informe o diretório padrão para criação dos diretórios HOME dos usuários.

NOTA: Atributo RFC2307 é dispensável para uso com parâmetros 'godc/uodc'.

Exemplo: '/home/' (sem as aspas):
"
    read H_DIR;
    echo "HOME_DIR=$H_DIR">>$CONFFILE

    logo;
    echo "Informe o caminho do SHELL DE LOGIN dos os usuários que serão criados.

NOTA: Atributo RFC2307 é dispensável para uso com parâmetros 'godc/uodc'.

Exemplo: '/bin/false' (sem as aspas):
"
    read L_SHELL;
    echo "LOGIN_SHELL=$L_SHELL">>$CONFFILE
    logo;
}
checkconf() {
    logo;
    if [ -e "$CONFFILE" ]; then
        echo "O arquivo de configuração '$CONFFILE' já existe com o conteúdo abaixo:
";
        cat $CONFFILE;
        echo " ";
        echo " O que deseja fazer?

    1 - Manter configuração e continuar.
    2 - Sobrescrever com uma nova configuração.

";
        read RESP;
        case $RESP in
            1)
                readconf;
			;;
            2)
                makeconf;
                readconf;
            ;;
            *)
                echo "Resposta inválida. Recomeçando...
";
                sleep 4;
                checkconf;
            ;;
        esac
    else
        makeconf;
        readconf;
    fi
}
dbmake() {
    logo;
    DBPATH=adcreate.d
    OUDB=$DBPATH/ous.txt
    GRPDB=$DBPATH/groups.csv
    USERDB=$DBPATH/users.csv
#
    makedir() {
        echo "Criando diretório '$DBPATH'...";
        mkdir $DBPATH;
        echo "Diretório '$DBPATH' criado."
    }
    makeousfile() {
        echo "Criando arquivo '$OUDB'...";
        touch $OUDB;
        echo "Arquivo '$OUDB' criado.";
    }
    makegrpsfile() {
        echo "Criando arquivo '$GRPDB'...";
        echo -e "GRUPO\tMEMBRO_DE\tESCOPO\tUORG\tAD_GID" > $GRPDB;
        echo "Arquivo '$GRPDB' criado.";
    }
    makeusersfile() {
        echo "Criando arquivo '$USERDB'...";
        echo -e "NOME\tSOBRENOME\tUORG\tSENHA\tMEMBRO_DE\tAD_UID" > $USERDB;
        echo "Arquivo '$USERDB' criado.";
    }
    checkall() {
        if [ ! -f "$OUDB" ]; then
            makeousfile;
        elif [ ! -f "$GRPDB" ]; then
            makegrpsfile;
        elif [ ! -f "$USERDB" ]; then
            makeusersfile;
        else
            echo "Tudo ok aqui!";
        fi
    }
    if [ ! -d "$DBPATH" ]; then
        echo "Diretório base '$DBPATH' não existe!
";
        sleep 2;
        makedir;
        makeousfile;
        makegrpsfile;
        makeusersfile;
        echo "Tudo ok aqui!";
    else
        echo "Diretório base '$DBPATH' já existe!
Verificando arquivos...";
        sleep 2;
        checkall;
        sleep 2;
    fi
    echo " ";
}
#
if [ "$#" -eq 1 ]; then
    export PAR=$1;
    case $1 in
        help)
			help;
        ;;
        ou)
			erro2;
            exit 1;
        ;;
        gmid)
			erro2;
            exit 1;
        ;;
        gaid)
			erro2;
            exit 1;
        ;;
        godc)
			erro2;
            exit 1;
        ;;
        umid)
			erro2;
            exit 1;
        ;;
        uaid)
			erro2;
            exit 1;
        ;;
        uodc)
			erro2;
            exit 1;
        ;;
        cfg)
            checkconf;
            dbmake;
            exit 0;            
        ;;
        auto)
            readconf;
            dbmake;
            logo;
            export IFS=";";
            echo "************** CRIAÇÃO DE UNIDADES ORGANIZACIONAIS ***************
        	";
            export ENTRADA=adcreate.d/ous.txt;
            ou;
            echo "************* CRIAÇÃO DE GRUPOS COM GID AUTOMÁTICA ***************
        	";
            export ENTRADA=adcreate.d/groups.csv;
            PAR=gaid;
            CompGroup;
            echo "************ CRIAÇÃO DE USUÁRIOS COM UID AUTOMÁTICA **************
			";
            export ENTRADA=adcreate.d/users.csv;
            PAR=uaid;
            CompUser;
        ;;
        *)
			erro1;
            exit 1;
        ;;
    esac
elif [ "$#" -eq 2 ]; then
    [ ! -f $2 ] && { logo; echo "Erro! Arquivo '$2' não encontrado. Nada feito.
"; exit 1;}
    export PAR=$1;
    export ENTRADA=$2;
    export IFS=";";
    case $1 in
    	ou)	
            readconf;
            logo;
        	echo "************** CRIAÇÃO DE UNIDADES ORGANIZACIONAIS ***************
        	";
        	ou;
        ;;
        gmid)
            readconf;
            logo;
        	echo "**************** CRIAÇÃO DE GRUPOS COM GID MANUAL ****************
        	";
            CompGroup;
    	;;
        gaid)
            readconf;
            logo;
        	echo "************* CRIAÇÃO DE GRUPOS COM GID AUTOMÁTICA ***************
        	";
            CompGroup;
    	;;
        godc)
            readconf;
            logo;
			echo "*********** CRIAÇÃO DE GRUPOS SEM PARÂMETROS RFC2307 *************
			";
            CompGroup;
    	;;
        umid)
            readconf;
            logo;
			echo "************** CRIAÇÃO DE USUÁRIOS COM UID MANUAL ****************
            ";
            CompUser;
    	;;
        uaid)
            readconf;
            logo;
			echo "************ CRIAÇÃO DE USUÁRIOS COM UID AUTOMÁTICA **************
			";
            CompUser;
    	;;
        uodc)
            readconf;
            logo;
			echo "********** CRIAÇÃO DE USUÁRIOS SEM PARÂMETROS RFC2307 ************
			";
            CompUser;
    	;;
        *)
			erro1;
            exit 1;
    	;;
    esac
else
    erro0;
    exit 1;
fi
exit 0;
